#!/usr/bin/env python3
# -*- coding: utf-8 -*-

"""
ChatGPT Automation Batch Processing Tool

This program automates interactions with the ChatGPT application, sending images and text prompts,
and capturing the responses. It supports single-window and multi-window modes, with options to save
images generated by ChatGPT.

Main features:
1. Automatically checks or starts the ChatGPT application
2. Creates new conversations or uses a single window
3. Sends images and text prompts
4. Captures ChatGPT's text and image responses
5. Saves results locally
"""

import time
import sys
import os
import argparse

from utils.config_manager import ConfigManager
from utils.app_controller import AppController
from utils.file_manager import FileManager
from utils.image_processor import ImageProcessor
from utils.processor import Processor


class ChatGPTBatchProcessor:
    """
    ChatGPT batch processor class that coordinates the entire batch processing workflow
    """
    
    def __init__(self, config_path=None):
        """Initialize the batch processor and its modules"""
        self.config_manager = ConfigManager(config_file=config_path)
        self.app_controller = AppController()
        self.file_manager = FileManager()
        
        # Get scroll_amount from configuration
        config = self.config_manager.config
        scroll_amount = config.get("scroll_amount", 10)
        
        self.image_processor = ImageProcessor(scroll_amount)
        self.processor = Processor(
            self.config_manager,
            self.app_controller,
            self.image_processor,
            self.file_manager
        )
    
    def show_settings(self, config):
        """
        Display current settings
        
        Args:
            config (dict): Configuration dictionary
        """
        window_type = config["mode"]["window_type"]
        input_type = config["mode"]["input_type"]
        capture_images = config["mode"]["capture_images"]
        use_prefix = config.get("use_prefix", False)
        text_prefix = config.get("text_prefix", "")
        
        print(f"\nCurrent settings:")
        print(f"- Window mode: {'Multiple windows' if window_type == 'multi' else 'Single window'}")
        print(f"- Input type: {'Text only' if input_type == 'text_only' else 'Text+Image'}")
        print(f"- Image capture: {'Enabled' if capture_images else 'Disabled'}")
        
        if input_type == "text_only":
            print(f"- Use prefix: {'Yes' if use_prefix else 'No'}")
            if use_prefix:
                print(f"- Text prefix: '{text_prefix}'")

    
    def update_settings(self, config):
        """
        Let user update settings
        
        Args:
            config (dict): Configuration dictionary
            
        Returns:
            dict: Updated configuration
        """
        # Ask user if they want to change the mode
        change_mode = input("Do you want to change these settings? (yes/no): ").strip().lower()
        if change_mode in ["yes", "y"]:
            # Ask for window type
            window_choice = input("Select window mode (1: Single window, 2: Multiple windows) [default=2]: ").strip()
            if window_choice == "1":
                config["mode"]["window_type"] = "single"
            else:
                config["mode"]["window_type"] = "multi"
            
            # Ask for input type
            input_choice = input("Select input type (1: Text only, 2: Text+Image) [default=2]: ").strip()
            if input_choice == "1":
                config["mode"]["input_type"] = "text_only"
                
                # Ask for prefix settings in text-only mode
                prefix_choice = input("Add prefix to each line of text? (yes/no) [default=no]: ").strip().lower()
                if prefix_choice in ["yes", "y"]:
                    config["use_prefix"] = True
                    prefix = input("Enter the prefix to add: ").strip()
                    config["text_prefix"] = prefix
                else:
                    config["use_prefix"] = False
                    config["text_prefix"] = ""
            else:
                config["mode"]["input_type"] = "text_image"
                
            # Ask about image capture option for all modes
            capture_choice = input("Capture images generated by ChatGPT? (1: No, 2: Yes) [default=2]: ").strip()
            if capture_choice == "1":
                config["mode"]["capture_images"] = False
            else:
                config["mode"]["capture_images"] = True
            
            # Save updated configuration
            self.config_manager.save(config)
            print("Settings updated.")
        
        return config
    
    def prepare_prompts(self, prompt_content, num_items, config):
        """
        Prepare prompt list, processing multi-line prompts based on mode
        
        Args:
            prompt_content (str): Prompt file content
            num_items (int): Number of items (images or text lines)
            config (dict): Configuration dictionary
            
        Returns:
            list: List of prompts
        """
        input_type = config["mode"]["input_type"]
        use_prefix = config.get("use_prefix", False)
        prefix = config.get("text_prefix", "")
        
        if input_type == "text_only":
            # Text-only mode: Split prompts by line
            lines = prompt_content.strip().split('\n')
            prompts = []
            
            for line in lines:
                if line.strip():  # Skip empty lines
                    if use_prefix:
                        prompts.append(f"{prefix}{line}")
                    else:
                        prompts.append(line)
            
            if len(prompts) < num_items:
                # If not enough prompts, cycle through them
                prompts = (prompts * (num_items // len(prompts) + 1))[:num_items]
        else:
            # Text+Image mode: Use the entire prompt text for each image
            prompts = [prompt_content] * num_items
        
        return prompts
    
    def process_tasks(self, items, prompts, config, image_folder=None):
        """
        Process task list, which can be pure text tasks or image tasks
        
        Args:
            items (list): List of items (image filenames or text line indices)
            prompts (list): List of prompts
            config (dict): Configuration dictionary
            image_folder (str, optional): Image folder path, required only for text+image mode
            
        Returns:
            int: Number of successfully processed tasks
        """
        successful = 0
        input_type = config["mode"]["input_type"]
        
        for idx, item in enumerate(items, start=1):
            if input_type == "text_image":
                item_name = item  # Image filename
                img_path = os.path.join(image_folder, item)
                print(f"[{idx}/{len(items)}] Processing image: {item}")
            else:
                # In text_only mode, item is the prompt index
                item_name = f"prompt_{idx}"  # Create unique name for each pure text task
                img_path = None
                print(f"[{idx}/{len(items)}] Processing text prompt #{idx}")
            
            # Get current prompt
            current_prompt = prompts[idx-1]
            
            # Determine whether to create a new chat - if in single window mode, only create a new chat for the first item
            create_new = config["mode"]["window_type"] == "multi" or idx == 1
            
            success = self.processor.process_task(
                item_name, 
                current_prompt, 
                config, 
                img_path=img_path, 
                new_chat=create_new
            )
            
            if success:
                successful += 1
            
            # Wait between tasks
            time.sleep(1)
        
        return successful
    
    def run(self):
        """
        Run the batch processing workflow
        
        Returns:
            bool: Whether processing was successful
        """
        try:
            # Load configuration
            config = self.config_manager.config
            output_dir = config["output_dir"]
            self.file_manager.prepare_output_folder(output_dir)

            # Read default prompt file
            prompts_file = config["default_prompts_file"]
            default_prompt_content = self.file_manager.read_prompt_file(prompts_file)
            if not default_prompt_content:
                print("Program exit: Prompt file is empty or cannot be read.")
                return False

            # Display and update settings
            self.show_settings(config)
            config = self.update_settings(config)
            
            # Ensure ChatGPT is running
            print("Checking ChatGPT application status...")
            if not self.app_controller.check_chatgpt_running():
                print("Unable to start or access ChatGPT. Exiting program.")
                return False
            
            # Get image folder (if in text_image mode)
            image_folder = None
            if config["mode"]["input_type"] == "text_image":
                image_folder = config.get("image_folder")
                if not os.path.isdir(image_folder):
                    print(f"Invalid folder in configuration: {image_folder}")
                    user_input = input("Please enter a valid image folder path: ").strip()
                    if not os.path.isdir(user_input):
                        print(f"Invalid folder: {user_input}")
                        return False
                    image_folder = user_input
                    # Update configuration with user-provided folder
                    config["image_folder"] = image_folder
                    self.config_manager.save(config)

            # Prepare task list based on input type
            if config["mode"]["input_type"] == "text_image":
                # Text+Image mode: Collect image files
                num_to_process = config.get("num_images_to_process", 100)
                items = self.file_manager.collect_image_files(image_folder, num_to_process)
                
                if not items:
                    print("No valid images found in the specified folder.")
                    return False
                
                print(f"\nProcessing {len(items)} images.\n")
            else:
                # Text-only mode: Use line count as items
                lines = [line for line in default_prompt_content.strip().split('\n') if line.strip()]
                items = list(range(len(lines)))  # Use indices as items
                if not items:
                    print("No valid content lines found in the prompt file.")
                    return False
                print(f"\nProcessing {len(lines)} text prompts.\n")
            
            # Prepare prompt list
            prompts = self.prepare_prompts(default_prompt_content, len(items), config)
            
            # Process tasks
            successful = self.process_tasks(items, prompts, config, image_folder)
            
            # Display statistics
            print(f"\n=== Processing Complete ===")
            print(f"Successful: {successful}/{len(items)}")
            
            return successful == len(items)
            
        except Exception as e:
            print(f"Error occurred during program execution: {str(e)}")
            import traceback
            traceback.print_exc()
            return False


def main(config_path=None):
    """Main program entry point"""
    processor = ChatGPTBatchProcessor(config_path)
    result = processor.run()
    return 0 if result else 1


if __name__ == "__main__":
    # Parse command-line arguments
    parser = argparse.ArgumentParser(description="ChatGPT Automation Batch Processing Tool")
    parser.add_argument("--config_path", type=str, help="Path to the configuration file", default="example/text-only/config.json")
    args = parser.parse_args()

    # Update configuration path if provided
    if args.config_path:
        sys.exit(main(args.config_path))
    else:
        sys.exit(main())

# python chatgpt_script.py --config_path example/text-image/config.json